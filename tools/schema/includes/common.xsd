<?xml version="1.0" encoding="UTF-8"?>
<!-- edited with XMLSpy v2008 sp1 (http://www.altova.com) by Mentor Graphics (Mentor Graphics (Ireland) Ltd - UK Branch) -->
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore" ecore:nsPrefix="Common">
	<xs:complexType name="menuDataType" ecore:name="DataContainer">
		<xs:sequence>
			<xs:element name="data" minOccurs="0" maxOccurs="unbounded" ecore:name="datas">
				<xs:annotation>
					<xs:documentation>A menu or item may have multiple data fields associated with it.  The data element enables you to specify a particular field value for the enclosing item or menu</xs:documentation>
				</xs:annotation>
				<xs:complexType ecore:name="BasicData">
					<xs:attribute name="field" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The field name for which the specified data value applies (e.g. "icon" or "caption")</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The data value corresponding to the specified field</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="dataType" type="valueType" default="string">
						<xs:annotation>
							<xs:documentation>The data type of the field.  If this is missing, the data type is assumed to be 'string'.  If the type is not 'string', the value will be converted to the appropriate type at runtime.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
		</xs:sequence>
	</xs:complexType>
	<xs:simpleType name="hexColor">
		<xs:annotation>
			<xs:documentation>Enter color values using the HTML hexadecimal "#RRGGBB" notation, or as a token </xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string">
			<xs:pattern value="#[0-9a-fA-F]{6}"/>
		</xs:restriction>
	</xs:simpleType>
	<xs:complexType name="fontType" ecore:name="Font">
		<xs:annotation>
			<xs:documentation>Defines a font</xs:documentation>
		</xs:annotation>
		<xs:attribute name="face" type="xs:string" use="required">
			<xs:annotation>
				<xs:documentation>Depending on platform, Inflexion UI supports both NDI bitmap fonts (generated by the Inflexion UI Font Creator tool) and/or native (e.g. TTF) fonts.  The face attribute can contain either a reference to an NDI file containing the font graphic, or the name of a native font preceded by an asterisk (e.g. "*Arial")</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="style" type="xs:string" use="optional">
			<xs:annotation>
				<xs:documentation>The style attribute is optional and is only used for native fonts.  The three options are "bold", "italic" and "bolditalic".  To specify a bold style (for example) for an NDI font, you must provide a separate NDI graphic file</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="color" type="xs:string" use="optional">
			<xs:annotation>
				<xs:documentation>Specifies the default color of the font, used unless it is overriden by a color in the layout</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>
	<xs:complexType name="basicDesignSizeType" ecore:name="BasicDesignSize">
		<xs:attribute name="name" type="xs:string" use="required">
			<xs:annotation>
				<xs:documentation>Defines a name for the design size.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="width" type="xs:int" use="required">
			<xs:annotation>
				<xs:documentation>Defines the width of the design size in pixels.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="origin" type="xs:int" use="required">
			<xs:annotation>
				<xs:documentation>Defines the vertical position of the origin from the top of the screen.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>
	<xs:complexType name="abstractDisplayModeType" abstract="true" ecore:name="AbstractDisplayMode">
		<xs:attribute name="name" type="xs:string" use="required">
			<xs:annotation>
				<xs:documentation>Defines the unique name of the display mode.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="width" type="xs:int" use="required">
			<xs:annotation>
				<xs:documentation>Defines the width of the display in pixels.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="height" type="xs:int" use="required">
			<xs:annotation>
				<xs:documentation>Defines the height of the display in pixels.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="designSize" type="xs:string" use="required">
			<xs:annotation>
				<xs:documentation>References a design size by  name.  The design size chosen must be used by all templates when this display mode is in use.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>
	<xs:complexType name="keySettingsType" ecore:name="KeySettings">
		<xs:attribute name="name" type="xs:string" use="required">
			<xs:annotation>
				<xs:documentation>The friendly name presented to the theme writer in the Inflexion UI Express.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="scanCode" type="xs:int" use="optional">
			<xs:annotation>
				<xs:documentation>The decimal representation of the platform specific scan code.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="simtestCode" type="xs:int" use="optional">
			<xs:annotation>
				<xs:documentation>The decimal representation of the code used by simtest.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>
	<xs:simpleType name="touchOrientationType">
		<xs:annotation>
			<xs:documentation>Enter "up", "down", "left" or "right"</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string">
			<xs:enumeration value="up"/>
			<xs:enumeration value="down"/>
			<xs:enumeration value="left"/>
			<xs:enumeration value="right"/>
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="zeroToOne">
		<xs:annotation>
			<xs:documentation>Enter any numeric value between 0 and 1</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:float">
			<xs:minInclusive value="0"/>
			<xs:maxInclusive value="1"/>
		</xs:restriction>
	</xs:simpleType>
	<xs:complexType name="xyzType" ecore:name="Point">
		<xs:annotation>
			<xs:documentation>Enter x (horizontal), y (vertical) and z (depth) values</xs:documentation>
		</xs:annotation>
		<xs:attribute name="x" type="xs:float" use="optional"/>
		<xs:attribute name="y" type="xs:float" use="optional"/>
		<xs:attribute name="z" type="xs:float" use="optional"/>
	</xs:complexType>
	<xs:complexType name="rotationType">
		<xs:complexContent>
			<xs:extension base="xyzType">
				<xs:attribute name="angle" type="xs:float">
					<xs:annotation>
						<xs:documentation>Specifies the axis around the angle in degrees</xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:simpleType name="velocityProfileType">
		<xs:annotation>
			<xs:documentation>Enter "linear", "accelerate", "decelerate", "bounce", "halfSine" or "catapult"</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string">
			<xs:enumeration value="linear"/>
			<xs:enumeration value="accelerate"/>
			<xs:enumeration value="decelerate"/>
			<xs:enumeration value="bounce"/>
			<xs:enumeration value="halfSine"/>
			<xs:enumeration value="catapult"/>
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="percent">
		<xs:annotation>
			<xs:documentation>Enter a percentage value</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:unsignedInt">
			<xs:minInclusive value="0"/>
			<xs:maxInclusive value="100"/>
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="floatPercent">
		<xs:annotation>
			<xs:documentation>Enter a percentage value as a float</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:float">
			<xs:minInclusive value="0"/>
			<xs:maxInclusive value="100"/>
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="valueType">
		<xs:annotation>
			<xs:documentation>Data type of the attribute</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string">
			<xs:enumeration value="int"/>
			<xs:enumeration value="string"/>
			<xs:enumeration value="time"/>
			<xs:enumeration value="float"/>
			<xs:enumeration value="boolean"/>
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="slParamType" ecore:name="ShaderParameterType">
		<xs:restriction base="xs:string">
			<xs:enumeration value="bool"/>
			<xs:enumeration value="int"/>
			<xs:enumeration value="float"/>
			<xs:enumeration value="bvec2"/>
			<xs:enumeration value="bvec3"/>
			<xs:enumeration value="bvec4"/>
			<xs:enumeration value="ivec2"/>
			<xs:enumeration value="ivec3"/>
			<xs:enumeration value="ivec4"/>
			<xs:enumeration value="vec2"/>
			<xs:enumeration value="vec3"/>
			<xs:enumeration value="vec4"/>
			<xs:enumeration value="sampler2D"/>
			<xs:enumeration value="samplerCube"/>
			<xs:enumeration value="mat2"/>
			<xs:enumeration value="mat3"/>
			<xs:enumeration value="mat4"/>
		</xs:restriction>
	</xs:simpleType>
	<xs:complexType name="slParamValueType" ecore:name="ShaderParameterValue">
		<xs:attribute name="value1" type="xs:string" use="required">
			<xs:annotation>
				<xs:documentation>Value of the uniform</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="value2" type="xs:string" use="optional">
			<xs:annotation>
				<xs:documentation>2nd element value of the uniform if the uniform type is a vector of length 2 or greater (or a cube map sampler).</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="value3" type="xs:string" use="optional">
			<xs:annotation>
				<xs:documentation>3rd element value of the uniform if the uniform type is a vector of length 3 or greater (or a cube map sampler).</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="value4" type="xs:string" use="optional">
			<xs:annotation>
				<xs:documentation>4th element value of the uniform if the uniform type is a vector of length 4 (or a cube map sampler).</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="value5" type="xs:string" use="optional">
			<xs:annotation>
				<xs:documentation>5th element value of the uniform (only used for cubemap samplers).</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="value6" type="xs:string" use="optional">
			<xs:annotation>
				<xs:documentation>6th element value of the uniform (only used for cubemap samplers).</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>
	<xs:complexType name="uniformSettingType" ecore:name="UniformSettings">
		<xs:annotation>
			<xs:documentation>openGL ES 2.0 Shader Uniform setting</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="uniformValue" type="slParamValueType"/>
		</xs:sequence>
		<xs:attribute name="name" type="xs:string" use="required">
			<xs:annotation>
				<xs:documentation>Name of the uniform</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="uniformType" type="slParamType" use="required">
			<xs:annotation>
				<xs:documentation>Shader language type of this uniform</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>
	<xs:complexType name="uniformSettingsList" ecore:name="UniformSettingsContainer">
		<xs:sequence>
			<xs:element name="uniform" type="uniformSettingType" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="abstractFieldType" abstract="true" ecore:name="AbstractField">
		<xs:attribute name="name" type="xs:string" use="required">
			<xs:annotation>
				<xs:documentation>Defines the field name used by Inflexion UI.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="dataType" type="valueType" use="optional" default="string">
			<xs:annotation>
				<xs:documentation>Defines the type of the raw data.  Can be "string", "int", "float", "boolean" or "time".</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="mode" use="optional" default="output">
			<xs:annotation>
				<xs:documentation>Defines the usage of the field as either "input" if the field will be set by the user/UI or "output" if the field value will be set by the module.  Note that fields cannot be both input and output, and that if this is not set then the field is assumed to be an output field.  Only fields of mode "input" can be attached to touch regions.</xs:documentation>
			</xs:annotation>
			<xs:simpleType ecore:name="FieldModeType">
				<xs:restriction base="xs:string">
					<xs:enumeration value="input"/>
					<xs:enumeration value="output"/>
					<xs:enumeration value="inputOutput"/>
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
		<xs:attribute name="previewValue" type="xs:string" use="optional">
			<xs:annotation>
				<xs:documentation>Defines a value to be shown in the Inflexion UI Express for this field.  This is for preview purposes only.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="defaultValue" type="xs:string" use="optional">
			<xs:annotation>
				<xs:documentation>For parameters and variables, this is the value to assign to them when no expression is bound to them.  This may be an expression, and is evaluated once, when the parameter or variable is first created. For module fields, this defines the string to return if the data mapping did not find a result, or in the case of raw time data, this value is always used.  The value string can contain one format specifier (e.g. %d or %s) to incorporate the raw value into the returned value.  For time, the value can contain any standard format string from the strftime api call (e.g. "%H:%M %d/%m/%y").  Defaults to "%s" for type "string", "%d" for type "int", "%f" for type "float" and "%H:%M %d/%m/%y" for type "time".  If no output is required then this should be explicitly set to the empty string ("").</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>
	<xs:complexType name="entryPointIdMapType" ecore:name="EntryPointMap">
		<xs:sequence>
			<xs:element name="entryPoint" maxOccurs="unbounded" ecore:name="mappings">
				<xs:complexType ecore:name="EntryPointMapping">
					<xs:attribute name="entryPointID" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>Id of an entry point.  Entry point IDs are defined in the application definition file, so this value must match one of the IDs in there.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="nodeUri" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>Uri used to open the UI node to be used for this entry point.  The URI must be of the form: node://(node file location)?parameter1=value1;...;parameterN=valueN</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="palettesType" ecore:name="PalettesContainer">
		<xs:sequence>
			<xs:element name="palette" minOccurs="0" maxOccurs="unbounded" ecore:name="paletteReferences">
				<xs:annotation>
					<xs:documentation>A palette project containing components referenced in this project.</xs:documentation>
				</xs:annotation>
				<xs:complexType ecore:name="PaletteReference">
					<xs:attribute name="name" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>Name of the palette project.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="path" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>Path of the palette project (updated for packager every time .package is saved from Inflexion UI Express).</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
		</xs:sequence>
	</xs:complexType>
</xs:schema>
